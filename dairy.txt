——此篇不仅用于上交的学习日志，更作为自己复习资料使用——
2017/4/5
开始学习git的使用
git init：命令把这个目录变成Git可以管理的仓库

git add xxxx.xxx：添加文件到暂存区
注意：在添加时是文件名字加后缀，在新建时不用加后缀

git commit –m “xxxxx”: 提交暂存区的文件到版本库
注意：1.提交之后暂存库区内无内容
      2.-m 后面是提交时的注解，切记一定要加注解以免以后查询时忘记做过什么改动
      3.提交是将暂存区所有内容提交
      4.若修改文件未添加到暂存区，则无法提交到版本库

git diff HEAD -- xxxx.xxx: 查看工作区和版本库里最新版本的区别

git log: 查看最近工作日志
注意：此时会显示之前“-m”后的注解内容

git reset –hard HEAD: 退回之前的版本
注意：HEAD表示当前版本（提交后），HEAD^表示上一个，HEAD~XX表示更早的版本
git reset --hard xxxxxxx（每一个版本的代码号）：可返回到之前修改过的任意一个版本
git reflog: 查看每一次修改的代码号

cat xxxx.xxx: 查看文件内容

git checkout -- xxxx.xxx: 撤销上一步操作
注意：1.在工作区修改，未提交，可撤销
      2.提交之后，在工作区修改，可撤销回提交后的状态


git reset HEAD xxxx.xxx: 在修改文件后提交到暂存区时，可将文件从暂存区返回到工作去，之后可再用’git checkout – xxxx.xxx’将工作去的修改撤销

rm xxxx.xxx: 删除工作区内的文件
注意：1.版本库内不变动，若 ‘commit’ 则版本库内文件也删除
      2.此时发现 ‘git checkout – xxxx..xxx’ 实际作用为还原而非删除，此时可利用此命令将删除文件还原至工作区！

小结：今日学习结束，主要是对于git的一些基本配置及其本地命令的学习使用，难度不高，版本管理效果的确不错，但是尚未想到在日常应用中会有什么应用，只能针对于字符式的功能实用性个人感觉稍弱，想起之前师兄介绍的在CCS中的应用，感觉对于程序的保存和对比应该会比较有用，毕竟之前的个人习惯是
robotv1.0  robotv2.0  robotv3.0…………robotv999.0此类…….对于较为复杂的程序应该会有不错的效果，明日继续
另外：….只学了这么几个功能就有这么多语句，不知道以后还会有多少= =，希望在基于应用软件上的git优化会做的简单一些




       


      


